{"version":3,"sources":["Components/header/squirrel.jpg","sq2.gif","Components/hooks/fetch.js","Components/header/index.js","Components/footer/index.js","Components/login/index.js","Components/todos/index.js","Components/createToDo/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useFetch","url","useState","isLoading","setLoading","data","setData","useEffect","a","fetch","response","json","doFirstFetch","console","log","reload","Header","props","src","logo","id","alt","userName","Footer","Login","name","setName","history","useHistory","onSubmit","e","preventDefault","setUserName","target","reset","push","onChange","value","type","Todos","completedCount","setCompletedCount","incompletedCount","setIncompletedCount","listOfTodos","updateStoredTodos","index","method","Ccount","Icount","forEach","todo","completed","map","key","className","title","assignedTo","difficulty","onClick","toggleComplete","deleteHandler","Create","range","setRange","newTodo","Number","assignee","headers","body","JSON","stringify","newRange","min","max","step","App","user","setUser","refresh","setHistory","window","localStorage","setItem","document","LoadingPic","exact","path","newUserName","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e28863e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/squirrel.f11eac82.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sq2.b3f8f46f.gif\";","import { useState, useEffect } from 'react';\r\n\r\nexport default function useFetch(url){\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [data, setData] = useState(null);\r\n  \r\n    useEffect(() => {\r\n      async function doFirstFetch() {\r\n        setLoading(true);\r\n        let response = await fetch(url);\r\n        let json = await response.json();\r\n        setData(json);\r\n        setLoading(false);\r\n        //console.log(json);\r\n      }\r\n  \r\n      doFirstFetch();\r\n      \r\n    }, [url]);\r\n\r\n    const refresh = () => {\r\n      console.log(\"refreshing\");\r\n      reload(url);\r\n    };\r\n\r\n    async function reload() {\r\n      let response = await fetch(url);\r\n      let json = await response.json();\r\n      setData(json);\r\n    };\r\n\r\n    return [\r\n        isLoading,\r\n        data,\r\n        refresh,\r\n      ];\r\n}","import React from 'react';\r\nimport logo from './squirrel.jpg';\r\nimport './header.scss';\r\n\r\n\r\n\r\n\r\nexport default function Header(props) {\r\n\r\n    let altName = \"Squirrel's\"\r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                <img src={logo} id=\"logo\" alt=\"logo\" />\r\n                <h2>\r\n                    <b>{ props.userName ? props.userName + \"'S\" : altName}</b> \r\n                    <p> To Do List</p>\r\n                   </h2>\r\n            </header>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './footer.scss';\r\n\r\n\r\nexport default function Footer(props){\r\n    return (\r\n        <>\r\n        <footer>\r\n            <p><span  id='copyright'>&copy; July 2020</span> Created by Squirrel! Apps</p>\r\n        </footer>\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport { useHistory  } from 'react-router-dom'\r\nimport './login.scss'\r\n\r\nexport default function Login(props){\r\n    \r\n    const [name, setName] = useState(\"\");\r\n\r\n    let history = useHistory();\r\n\r\n    function submitHandler(e){\r\n        e.preventDefault();\r\n        props.setUserName(name)\r\n        e.target.reset();\r\n        history.push('/todos');\r\n    }\r\n \r\n    return(\r\n        <>\r\n        <form id=\"loginForm\" onSubmit={submitHandler}>\r\n            <label>Enter your Name:</label>\r\n            <input onChange={(e) => setName(e.target.value)}></input>\r\n            <button type='submit'>Submit</button>\r\n        </form>\r\n        </>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport './todos.scss';\r\n\r\nexport default function Todos(props) {\r\n    const [completedCount, setCompletedCount] = useState(0);\r\n    const [incompletedCount, setIncompletedCount] = useState(0);\r\n    const {listOfTodos, updateStoredTodos } = props;\r\n\r\n\r\n    function toggleComplete(index) {\r\n        let updatedTodos = listOfTodos.map((todo, id) => {\r\n            if (id !== index) {\r\n                return todo;\r\n            } else {\r\n                todo.completed = !todo.completed;\r\n                return todo;\r\n            }\r\n\r\n        })\r\n        //need to make put method...someday\r\n        //props.addToHistory(updatedTodos);\r\n    }\r\n\r\n    async function deleteHandler(index) {\r\n        let url = 'https://deltav-todo.azurewebsites.net/api/v1/Todos/' + index;\r\n        let response = await fetch(url, {method: \"delete\"});\r\n        console.log(response);\r\n        updateStoredTodos();\r\n    }\r\n\r\n    useEffect(() => {\r\n        let Ccount = 0;\r\n        let Icount = 0;\r\n        listOfTodos.forEach(todo => {\r\n            if (todo.completed) {\r\n                Ccount++;\r\n            } else {\r\n                Icount++;\r\n            }\r\n        });\r\n        setCompletedCount(Ccount);\r\n        setIncompletedCount(Icount);\r\n    }, [listOfTodos])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div id=\"todoList\">\r\n                <div id=\"counters\">\r\n                    <h2>Incomplete To Dos: <span id=\"ic\">{incompletedCount}</span></h2>\r\n                    <h2>Completed To Dos: <span id=\"cc\">{completedCount}</span></h2>\r\n                </div>\r\n                <ul>\r\n                    {listOfTodos.map((todo, index) => (\r\n                        <li key={todo.id} className={todo.completed ? \"complete\" : \"incomplete\"}>\r\n                            <h3>To Do: {todo.title}</h3>\r\n                            <p>Assigned to: {todo.assignedTo}</p>\r\n                            {/* <p>Due Date: {todo.dueDate}</p> */}\r\n                            <p>Difficulty: {todo.difficulty}</p>\r\n                            <div className=\"buttons\">\r\n                                <button onClick={() => toggleComplete(index)}>Mark Complete</button>\r\n                                <button>Edit</button>\r\n                                <button onClick={() => deleteHandler(todo.id)}>Delete</button>\r\n                            </div>\r\n                        </li>\r\n\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './createToDo.scss';\r\n\r\nexport default function Create(props) {\r\n    const {updateStoredTodos} = props;\r\n    let url = 'https://deltav-todo.azurewebsites.net/api/v1/Todos'\r\n    const [range, setRange] = useState(0);\r\n\r\n   async function SubmitHandler(e) {\r\n        e.preventDefault();\r\n        let newTodo = {\r\n            title: e.target.title.value,\r\n            //dueDate: e.target.dueDate.value,\r\n            difficulty: Number(e.target.difficulty.value),\r\n            assignedTo: e.target.assignee.value,\r\n            completed: false,\r\n        }\r\n        console.log(newTodo);\r\n\r\n        let response = await fetch(url, {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify(newTodo),\r\n        }); \r\n        console.log(response);\r\n        updateStoredTodos();\r\n    }\r\n\r\n    function rangeHandler(e) {\r\n        let newRange = e.target.value;\r\n        setRange(newRange);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"create\">\r\n                <form onSubmit={SubmitHandler}>\r\n                    <fieldset>\r\n                        <legend>Create New To Do</legend>\r\n\r\n                        <label name=\"title\">To Do: </label>\r\n                        <input name=\"title\" type=\"text\"></input>\r\n\r\n                        {/* <label name=\"dueDate\">Due Date: </label>\r\n                        <input name=\"dueDate\" type=\"date\"></input> */}\r\n\r\n                        <label name=\"assignee\">Assigned To: </label>\r\n                        <input name=\"assignee\" type=\"text\"></input>\r\n\r\n                        <label name=\"difficulty\">Difficulty: {range !== 0 ? range : 5}</label>\r\n                        <input onChange={rangeHandler} name=\"difficulty\" type=\"range\" min=\"0\" max=\"5\" step=\"1\"></input>\r\n\r\n\r\n                        <button type=\"submit\">Create</button>\r\n                        <button type=\"reset\">Clear Form</button>\r\n                    </fieldset>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport useFetch from './Components/hooks/fetch';\nimport Header from './Components/header';\nimport Footer from './Components/footer';\nimport Login from './Components/login';\nimport Todos from './Components/todos';\nimport Create from './Components/createToDo';\nimport LoadingPic from './sq2.gif'\nimport './App.css';\n\nfunction App() {\n  const [user, setUser] = useState(\"Squirrel\");\n  const [isLoading, data, refresh] = useFetch('https://deltav-todo.azurewebsites.net/api/v1/Todos');\n  const [history, setHistory] = useState([]);\n\n  function setUserName(newUserName) {\n    console.log(newUserName)\n    setUser(newUserName);\n  }\n\n  function updateStoredTodos(){\n        refresh();\n        setHistory(data);\n        window.localStorage.setItem(\"history\", JSON.stringify(data));\n  }\n\n\n  useEffect(() => {\n    console.log(\"Intital history is: \" + data);\n    setHistory(data);\n    window.localStorage.setItem(\"history\", JSON.stringify(data));\n  }, [data]);\n\n  useEffect(() => {\n    document.title = user + \"'s To Do list\";\n  }, [user]);\n\n\n  if(isLoading) {\n    return (\n        <>\n        <img src={LoadingPic} id=\"loadingPic\" alt=\"loadingPic\" />\n        </>\n    )\n} else {\n  return (\n    <>\n      <Header userName={user} />\n      <Switch>\n        <Route exact path='/'>\n          <Login setUserName={setUserName} />\n        </Route>\n        <Route path='/todos'>\n          <Todos listOfTodos={history} updateStoredTodos={updateStoredTodos}  />\n          <Create updateStoredTodos={updateStoredTodos} />\n        </Route>\n        <Route>\n          404\n        </Route>\n      </Switch>\n      <Footer />\n    </>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}